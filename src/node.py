#!/usr/bin/env python3
"""
M√≥dulo principal do sistema distribu√≠do de consenso.

Implementa a classe Node que representa um processo no sistema distribu√≠do,
incluindo algoritmo de elei√ß√£o Bully, protocolo de consenso e detec√ß√£o de falhas.
"""

import argparse, threading
from time import monotonic, sleep
from random import randint
from collections import defaultdict
from .config import *
from .communication import NetworkManager
from .message import pack, unpack
from .failure_detection import start_heartbeat, start_monitor
from .election import bully

class Node:
    """
    Representa um processo no sistema distribu√≠do de consenso.
    
    Thread-safe implementation usando RLock para coordena√ß√£o interna.
    """
    
    def __init__(self, pid: int):
        """
        Inicializa um novo n√≥ do sistema distribu√≠do.
        
        Args:
            pid (int): ID √∫nico do processo (deve ser positivo)
        """
        self.pid = pid
        self.network = NetworkManager()
        
        # Estado do protocolo - protegido por lock
        self.state_lock = threading.RLock()
        self.round = ROUND_START
        self.leader = None
        self.alive = {pid: monotonic()}
        
        # Estado de elei√ß√£o
        self.in_election = False
        self.received_ok = False
        
        # Estado de consenso
        self.consensus_in_progress = False
        self.round_query_in_progress = False
        self.values_received = {}
        self.responses_received = {}
        self.round_responses = {}

        # Controle de estado da rede
        self.was_connected = True  # Assume conectado na inicializa√ß√£o
        
        # Log de cria√ß√£o bem-sucedida
        self.log(f"‚úÖ N√≥ {self.pid} criado com sucesso", "‚úÖ", "green")
        
        # Log de configura√ß√£o de timeouts
        from .config import CONSENSUS_INTERVAL, LEADER_QUERY_DELAY, LEADER_CONSENSUS_DELAY
        self.log(f"‚öôÔ∏è Timeouts: CONSENSUS_INTERVAL={CONSENSUS_INTERVAL}s, LEADER_QUERY_DELAY={LEADER_QUERY_DELAY}s, LEADER_CONSENSUS_DELAY={LEADER_CONSENSUS_DELAY}s", "‚öôÔ∏è", "blue")

    # util
    def log(self, msg: str, emoji: str = "‚ÑπÔ∏è", color: str = ""):
        """
        Exibe mensagem de log colorida com emoji para o processo.
        
        Args:
            msg (str): Mensagem a ser exibida
            emoji (str): Emoji para prefixar a mensagem
            color (str): Cor do texto ('red', 'green', 'yellow', 'blue', etc.)
        """
        colors = {
            "red": "\033[91m",
            "green": "\033[92m",
            "yellow": "\033[93m",
            "blue": "\033[94m",
            "purple": "\033[95m",
            "cyan": "\033[96m",
            "white": "\033[97m",
            "reset": "\033[0m",
            "bold": "\033[1m"
        }
        
        color_code = colors.get(color, "")
        reset_code = colors["reset"] if color else ""
        bold_code = colors["bold"]
        
        import time
        timestamp = time.strftime("%H:%M:%S") + f":{int(time.time() * 1000) % 1000:03d}"
        print(f"[{timestamp}] {bold_code}[{color_code}PID {self.pid}{reset_code}{bold_code}]{reset_code} {emoji} {color_code}{msg}{reset_code}", flush=True)

    # network
    def send(self, op: str, **kv):
        """
        Envia uma mensagem via multicast usando o NetworkManager.
        
        Args:
            op (str): Tipo da opera√ß√£o/mensagem
            **kv: Campos adicionais da mensagem
        """
        # VERIFICA√á√ÉO CR√çTICA: N√£o envia se n√£o h√° conex√£o
        if not self.network.connected:
            return False
            
        if op in ["OK", "ELECTION", "LEADER"]:
            recipient = kv.get("to", "ALL")
            self.log(f"Enviando {op} para {recipient}", "üì§", "purple")
        
        success = self.network.send(pack(op, **kv))
        if not success:
            self.log(f"Falha ao enviar {op} - rede indispon√≠vel", "‚ùå", "red")
                
        return success

    def get_alive_pids(self):
        """
        Retorna lista de PIDs vivos (excluindo o pr√≥prio).
        
        Returns:
            list[int]: Lista de PIDs dos processos vivos
        """
        return [pid for pid in self.alive.keys() if pid != self.pid]
    
    def clear_consensus_state(self):
        """
        Limpa estados de consenso para ressincroniza√ß√£o.
        
        Chamado quando l√≠der muda ou processo se reconecta.
        """
        self.consensus_in_progress = False
        self.round_query_in_progress = False
        
        # Limpa dados de rounds antigos para evitar travamentos
        current_round = self.round
        old_rounds = [r for r in self.values_received.keys() if r < current_round - 1]
        for old_round in old_rounds:
            self.values_received.pop(old_round, None)
            self.responses_received.pop(old_round, None)
        
        self.log("Estados de consenso limpos para ressincroniza√ß√£o", "üßπ", "blue")

    def calculate_current_value(self):
        """
        Calcula o valor atual do processo para o consenso.
        
        Returns:
            int: Valor calculado (fun√ß√£o do PID e n√∫mero aleat√≥rio)
        """
        i = randint(1, 10)
        return i * i * self.pid

    def start_consensus_round(self):
        """
        Inicia uma rodada de consenso (chamado pelo l√≠der).
        
        O l√≠der envia sinal START_CONSENSUS para todos os processos
        calcularem e enviarem seus valores.
        """
        self.log("üéØ start_consensus_round() chamado", "üéØ", "cyan")
        
        # VERIFICA√á√ÉO CR√çTICA: S√≥ inicia consenso se h√° conex√£o
        if not self.network.connected:
            self.log("‚ùå Sem rede - n√£o pode iniciar consenso", "üîå", "red")
            return
            
        with self.state_lock:
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - pausando consenso", "‚è∏Ô∏è", "yellow")
                return
                
            if self.pid != self.leader:
                self.log(f"N√£o sou l√≠der (l√≠der atual: {self.leader}) - ignorando start_consensus_round", "üôÖ", "yellow")
                return
            
            self.log(f"Iniciando consenso para round {self.round}", "üöÄ", "green")
            self.log(f"üî• L√çDER EXECUTANDO CONSENSO - Round {self.round}", "üî•", "green")
            self.consensus_in_progress = True
            self.values_received[self.round] = {}
            self.responses_received[self.round] = {}
            
            # Envia sinal para todos calcularem e enviarem seus valores
            self.send("START_CONSENSUS", round=self.round)

    def process_maximum_value(self):
        """
        Processa valores recebidos e calcula resposta.
        
        Verifica se recebeu valores de todos os processos vivos,
        calcula o m√°ximo e envia resposta para o l√≠der (apenas uma vez).
        """
        with self.state_lock:
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                return
                
            if self.round not in self.values_received:
                return
            
            alive_pids = set(self.alive.keys())
            received_pids = set(self.values_received[self.round].keys())
            
            # Verifica se recebeu valores de todos os processos vivos
            # OU se esperou tempo suficiente (para evitar travamentos)
            if not alive_pids.issubset(received_pids):
                # Se est√° esperando h√° muito tempo, processa com o que tem
                if len(received_pids) == 0:
                    return
                    
            # Calcula resposta (m√°ximo de todos os valores)
            values = list(self.values_received[self.round].values())
            if not values:
                return
                
            my_response = max(values)
            
            self.log(f"Valores recebidos: {values}, Resposta: {my_response}", "üßÆ", "cyan")
            
            # Envia resposta para o l√≠der (marca como enviada)
            self.log(f"Enviando resposta {my_response} para o l√≠der", "üì§", "cyan")
            self.send("RESPONSE", pid=self.pid, response=my_response, round=self.round)

    def process_consensus_responses(self):
        """
        Processa respostas e faz consenso final (l√≠der).
        
        Verifica se recebeu respostas de todos os processos vivos,
        faz consenso por maioria e avan√ßa para o pr√≥ximo round.
        """
        with self.state_lock:
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                return
                
            if self.pid != self.leader or self.round not in self.responses_received:
                return
            
            alive_pids = set(self.alive.keys())
            received_pids = set(self.responses_received[self.round].keys())
            
            # Processa se tem pelo menos uma resposta (para evitar travamentos)
            responses = list(self.responses_received[self.round].values())
            if not responses:
                return
            
            # Faz consenso por maioria
            response_counts = defaultdict(int)
            
            for response in responses:
                response_counts[response] += 1
            
            # Escolhe a resposta com maior n√∫mero de votos
            consensus_response = max(response_counts.items(), key=lambda x: x[1])[0]
            
            self.log(f"CONSENSO ROUND {self.round}: Resposta = {consensus_response} (votos: {dict(response_counts)})", "üéØ", "purple")
            
            # Avan√ßa para o pr√≥ximo round
            self.round += 1
            self.send("ROUND_UPDATE", round=self.round)
            
            self.consensus_in_progress = False
            
            # Agenda pr√≥xima rodada de consenso
            threading.Timer(CONSENSUS_INTERVAL, self.start_consensus_round).start()
            self.log(f"‚è∞ Pr√≥ximo round de consenso agendado em {CONSENSUS_INTERVAL}s", "‚è∞", "green")

    def query_current_round(self):
        """
        L√≠der pergunta qual round estamos (quando assume lideran√ßa).
        
        Consulta todos os processos sobre o round atual e agenda
        processamento do consenso de round.
        """
        self.log("üîç query_current_round() chamado", "üîç", "cyan")
        
        # VERIFICA√á√ÉO CR√çTICA: S√≥ faz query se h√° conex√£o
        if not self.network.connected:
            self.log("‚ùå Sem rede - n√£o pode fazer query de round", "üîå", "red")
            return
            
        with self.state_lock:
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - pausando query de round", "‚è∏Ô∏è", "yellow")
                return
                
            if self.pid != self.leader:
                self.log(f"N√£o sou l√≠der (l√≠der atual: {self.leader}) - ignorando query_current_round", "üôÖ", "yellow")
                return
            
            self.log("Consultando round atual dos processos", "üîç", "blue")
            self.round_query_in_progress = True
            self.round_responses = {}
            
            # Adiciona seu pr√≥prio round
            self.round_responses[self.pid] = self.round
            
            # Pergunta para todos
            self.send("ROUND_QUERY")
            
            # Aguarda respostas por alguns segundos
            threading.Timer(ROUND_QUERY_TIMEOUT, self.process_round_consensus).start()
            self.log(f"‚è∞ Processamento de consenso de round agendado em {ROUND_QUERY_TIMEOUT}s", "‚è∞", "blue")

    def process_round_consensus(self):
        """
        Faz consenso do round atual por maioria.
        
        Processa respostas da consulta de round, escolhe o round
        por maioria e inicia primeira rodada de consenso.
        """
        self.log("‚ö° process_round_consensus() chamado", "‚ö°", "cyan")
        
        with self.state_lock:
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                return
                
            if not self.round_query_in_progress or self.pid != self.leader:
                if self.pid != self.leader:
                    self.log(f"N√£o sou l√≠der (l√≠der atual: {self.leader}) - ignorando process_round_consensus", "üôÖ", "yellow")
                elif not self.round_query_in_progress:
                    self.log("Query de round n√£o est√° em andamento - ignorando process_round_consensus", "üôÖ", "yellow")
                return
            
            # Faz consenso por maioria dos rounds reportados
            rounds = list(self.round_responses.values())
            if not rounds:
                # Se n√£o tem respostas, usa round atual mesmo
                rounds = [self.round]
            
            round_counts = defaultdict(int)
            for round_num in rounds:
                round_counts[round_num] += 1
            
            # Escolhe o round com maior n√∫mero de votos
            consensus_round = max(round_counts.items(), key=lambda x: x[1])[0]
            
            self.round = consensus_round
            self.log(f"CONSENSO DE ROUND: Round atual = {consensus_round} (votos: {dict(round_counts)})", "‚ö°", "yellow")
            
            # Informa novo round para todos
            self.send("ROUND_UPDATE", round=self.round)
            
            self.round_query_in_progress = False
            
            # Inicia primeira rodada de consenso
            threading.Timer(LEADER_CONSENSUS_DELAY, self.start_consensus_round).start()
            self.log(f"‚è∞ Primeira rodada de consenso agendada em {LEADER_CONSENSUS_DELAY}s", "‚è∞", "green")

    # election helpers
    def start_election(self):
        """
        Inicia processo de elei√ß√£o Bully.
        
        S√≥ inicia elei√ß√£o quando:
        - L√≠der atual morreu/n√£o responde
        - N√£o h√° l√≠der conhecido
        - H√Å CONEX√ÉO DE REDE
        """
        # VERIFICA√á√ÉO CR√çTICA: S√≥ inicia elei√ß√£o se h√° conex√£o
        if not self.network.connected:
            self.log("‚ùå Sem rede - n√£o pode iniciar elei√ß√£o", "üîå", "red")
            return
            
        with self.state_lock:
            # Evita elei√ß√µes simult√¢neas
            if self.in_election:
                self.log("Elei√ß√£o j√° em andamento - ignorando", "üîÑ", "yellow")
                return
                
            self.in_election = True  # MARCA que elei√ß√£o come√ßou
            self.leader = None
            self.log(f"Iniciando processo de elei√ß√£o", "üó≥Ô∏è", "red")
            self.received_ok = False
            
        # Chama bully fora do lock para evitar deadlock
        bully(self)
        
        # Reseta flag ap√≥s elei√ß√£o (s√≥ se n√£o virou l√≠der)
        with self.state_lock:
            if self.leader != self.pid:
                self.in_election = False

    def become_leader(self):
        """
        Assume lideran√ßa do sistema.
        
        Assume lideran√ßa se ningu√©m maior respondeu na elei√ß√£o.
        """
        # VERIFICA√á√ÉO CR√çTICA: S√≥ assume lideran√ßa se h√° conex√£o
        if not self.network.connected:
            self.log("‚ùå Sem rede - n√£o pode assumir lideran√ßa", "üîå", "red")
            return
            
        with self.state_lock:
            if self.leader == self.pid:
                self.log("J√° sou o l√≠der - ignorando", "ü§¥", "blue")
                return
                
            self.leader = self.pid
            self.in_election = False  # Elei√ß√£o terminou - sou o l√≠der
            self.log("Assumiu lideran√ßa", "üëë", "green")
            self.log(f"üéâ AGORA SOU O L√çDER! - Round atual: {self.round}", "üéâ", "green")
            self.send("LEADER", pid=self.pid, round=self.round)
            
        # Quando vira l√≠der, consulta round atual
        threading.Timer(LEADER_QUERY_DELAY, self.query_current_round).start()
        self.log(f"‚è∞ Query de round inicial agendada em {LEADER_QUERY_DELAY}s", "‚è∞", "blue")

    # handlers
    def handle(self, data: bytes):
        """
        Processa mensagem recebida via multicast.
        
        Args:
            data (bytes): Dados da mensagem recebida
        """
        msg = unpack(data)
        op  = msg["op"]

        if op == "HELLO":
            sender_pid = msg["pid"]
            
            # Atualiza timestamp sempre (mesmo durante elei√ß√µes)
            self.alive[sender_pid] = monotonic()
            self.log(f"Recebido HELLO do processo {sender_pid}", "üëã", "yellow")
            
            # Responde IMEDIATAMENTE se √© o l√≠der (mesmo durante elei√ß√µes)
            if self.pid == self.leader:
                self.send("HELLO_ACK", pid=self.pid, round=self.round, to=sender_pid)
                self.log(f"Enviando HELLO_ACK para {sender_pid}", "‚úã", "green")

        elif op == "HELLO_ACK":
            # HELLO_ACK sempre funciona (importante para descoberta)
            if self.pid == msg["to"]:
                # Processo encontrou l√≠der - sincroniza estado COMPLETAMENTE
                with self.state_lock:
                    self.in_election = False  # Cancela elei√ß√£o se encontrou l√≠der
                    self.received_ok = False
                    self.leader = msg["pid"]
                    self.round = msg["round"]
                    self.alive[msg["pid"]] = monotonic()
                
                self.log(f"Conectado ao l√≠der {self.leader} (round {self.round})", "üîó", "green")
                
                # Limpa TUDO para ressincroniza√ß√£o completa
                self.clear_consensus_state()
                
                # For√ßa ressincroniza√ß√£o de estado
                self.values_received.clear()
                self.responses_received.clear()
                self.round_responses.clear()
                
            else:
                self.log(f"Processo {msg['to']} reconectou ao sistema", "üîÑ", "cyan")

        elif op == "HB":
            # HB sempre funciona (heartbeat √© fundamental)
            self.alive[msg["pid"]] = monotonic()

        elif op == "ELECTION":
            # ELECTION sempre funciona (cr√≠tico para elei√ß√µes)
            src = msg["source"]
            if self.pid > src:
                self.log(f"Sou maior que {src} - enviando OK e iniciando elei√ß√£o", "‚úÖ", "yellow")
                self.send("OK", to=src)
                threading.Timer(0.3, self.start_election).start()
            elif self.pid < src:
                self.log(f"Sou menor que {src} - ignorando elei√ß√£o", "üôà", "blue")
            else:
                self.log(f"Recebi elei√ß√£o de mim mesmo - ignorando", "ü§î", "blue")

        elif op == "OK":
            # OK sempre funciona (cr√≠tico para elei√ß√µes)
            if msg.get("to") == self.pid:
                self.log(f"Recebido OK na elei√ß√£o", "‚úÖ", "green")
                self.received_ok = True
                if self.leader == self.pid:
                    self.log("Deixando de ser l√≠der ap√≥s receber OK", "üëë‚û°Ô∏è", "yellow")
                    self.leader = None
            else:
                self.log(f"OK n√£o era para mim", "üì®", "blue")

        elif op == "LEADER":
            # LEADER sempre funciona (cr√≠tico para elei√ß√µes)
            # Novo l√≠der foi eleito - sincroniza estado
            leader_pid = msg["pid"]
                
            # Sincroniza com novo l√≠der
            self.in_election = False  # Elei√ß√£o terminou
            self.received_ok = False
            self.leader = leader_pid
            self.alive[leader_pid] = monotonic()
            
            self.log(f"L√≠der eleito: {self.leader} (round {self.round})", "üó≥Ô∏è", "green")
            self.clear_consensus_state()

        elif op == "START_CONSENSUS":
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - ignorando START_CONSENSUS", "‚è∏Ô∏è", "yellow")
                return
                
            # L√≠der iniciou consenso
            consensus_round = msg["round"]
            
            self.log(f"L√≠der iniciou consenso para round {consensus_round}", "üéØ", "green")
            
            with self.state_lock:
                if consensus_round not in self.values_received:
                    self.values_received[consensus_round] = {}
                
                # Calcula e envia valor (marca como enviado)
                my_value = self.calculate_current_value()
                self.values_received[consensus_round][self.pid] = my_value
                self.log(f"Calculei valor {my_value} para enviar", "üí∞", "cyan")
                self.send("VALUE", pid=self.pid, value=my_value, round=consensus_round)

        elif op == "VALUE":
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - ignorando VALUE", "‚è∏Ô∏è", "yellow")
                return
                
            # Recebeu valor de outro processo
            round_num = msg["round"]
            self.log(f"Recebido valor {msg['value']} do processo {msg['pid']} (round {round_num})", "üì•", "purple")
            with self.state_lock:
                if round_num not in self.values_received:
                    self.values_received[round_num] = {}
                
                self.values_received[round_num][msg["pid"]] = msg["value"]
                
                # Verifica se pode processar consenso
                threading.Timer(VALUE_PROCESS_DELAY, self.process_maximum_value).start()

        elif op == "RESPONSE":
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - ignorando RESPONSE", "‚è∏Ô∏è", "yellow")
                return
                
            # L√≠der recebeu resposta
            with self.state_lock:
                if self.pid == self.leader:
                    round_num = msg["round"]
                    self.log(f"Recebida resposta {msg['response']} do processo {msg['pid']} (round {round_num})", "üì©", "purple")
                    if round_num not in self.responses_received:
                        self.responses_received[round_num] = {}
                        
                    self.responses_received[round_num][msg["pid"]] = msg["response"]
                    
                    # Verifica se pode processar consenso final
                    threading.Timer(RESPONSE_PROCESS_DELAY, self.process_consensus_responses).start()

        elif op == "ROUND_QUERY":
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - ignorando ROUND_QUERY", "‚è∏Ô∏è", "yellow")
                return
                
            # L√≠der perguntou qual round estamos
            self.log(f"Enviando ROUND_RESPONSE = {self.round}", "üì©", "purple")
            self.send("ROUND_RESPONSE", pid=self.pid, round=self.round)

        elif op == "ROUND_RESPONSE":
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - ignorando ROUND_RESPONSE", "‚è∏Ô∏è", "yellow")
                return
                
            # Recebeu resposta de round
            with self.state_lock:
                if self.pid == self.leader and self.round_query_in_progress:
                    self.round_responses[msg["pid"]] = msg["round"]

        elif op == "ROUND_UPDATE":
            # PAUSA: Respeita elei√ß√µes em andamento
            if self.in_election:
                self.log("Elei√ß√£o em andamento - ignorando ROUND_UPDATE", "‚è∏Ô∏è", "yellow")
                return
                
            # L√≠der informou novo round
            self.round = msg["round"]
            self.log(f"Round atualizado para {self.round}", "üìä", "blue")

    # main loop --------------------------
    def run(self):
        """
        Executa o loop principal do processo distribu√≠do.
        
        Sequ√™ncia de inicializa√ß√£o:
        1. Inicia thread de escuta de mensagens
        2. Envia HELLO para descobrir l√≠der existente
        3. Aguarda resposta OU atividade de l√≠der
        4. S√≥ inicia elei√ß√£o se realmente n√£o h√° l√≠der ativo
        5. Inicia heartbeat e monitoramento
        
        Loop principal com prioridades:
        1. REDE: Aguarda conex√£o se desconectado
        2. RECONEX√ÉO: Envia HELLO quando rede volta
        3. ELEI√á√ÉO: Monitora elei√ß√µes em andamento
        4. DESCOBERTA: Procura l√≠der se n√£o tem nenhum
        """
        self.log(f"Iniciando processo com PID {self.pid}", "üöÄ", "green")
        
        # Inicia thread de escuta
        self.log("üéØ Iniciando thread de escuta de mensagens", "üéØ", "blue")
        listener = threading.Thread(target=self.listen, daemon=True)
        listener.start()

        # Pequena pausa para sincronizar com a rede
        self.log("‚è≥ Aguardando sincroniza√ß√£o com a rede...", "‚è≥", "yellow")
        sleep(0.5)

        # discovery
        self.log("üîç Enviando HELLO para descobrir l√≠der", "üîç", "yellow")
        self.send("HELLO", pid=self.pid)
        
        self.log("üíì Iniciando sistema de heartbeat", "üíì", "cyan")
        start_heartbeat(self)

        # Aguarda resposta inicial
        self.log(f"‚è±Ô∏è Aguardando resposta inicial por {HELLO_TIMEOUT}s", "‚è±Ô∏è", "blue")
        sleep(HELLO_TIMEOUT)
        
        # Se n√£o encontrou l√≠der, aguarda um pouco mais para detectar atividade
        if self.leader is None:
            self.log("üëÄ Aguardando atividade de l√≠der na rede...", "üëÄ", "yellow")
            sleep(3)  # Tempo adicional para detectar consensos, heartbeats, etc.
        
        # S√≥ inicia elei√ß√£o se realmente n√£o h√° l√≠der
        need_election = False
        with self.state_lock:
            if self.leader is None:
                need_election = True
        
        if need_election:
            self.log("üö® Nenhum l√≠der detectado ‚ûú iniciando elei√ß√£o", "üö®", "red")
            self.start_election()
        else:
            self.log(f"‚úÖ L√≠der {self.leader} encontrado - sem necessidade de elei√ß√£o", "‚úÖ", "green")

        # S√≥ inicia monitor ap√≥s descoberta inicial
        self.log("üõ°Ô∏è Iniciando sistema de monitoramento de falhas", "üõ°Ô∏è", "cyan")
        start_monitor(self)

        self.log("üîÑ Entrando no loop principal do sistema", "üîÑ", "green")
        
        # n√≥ vivo indefinidamente
        last_network_log = 0  # Para evitar spam de logs
        last_status_log = 0   # Para logs de status peri√≥dicos
        last_problem_log = 0  # Para logs de problemas do l√≠der
        
        while True:
            now = monotonic()
            
            # PRIORIDADE 1: Verifica se est√° conectado √† rede
            if not self.network.connected:
                # Log apenas a cada 10 segundos para evitar spam
                if now - last_network_log > 10:
                    self.log("‚ùå Sem conex√£o de rede - aguardando reconex√£o", "üîå", "red")
                    last_network_log = now
                sleep(2)
                continue
            
            # PRIORIDADE 2: Se reconectou, envia HELLO para redescobrir rede
            if not self.was_connected and self.network.connected:
                self.log("‚úÖ Rede reconectada - enviando HELLO para redescobrir", "üîå", "green")
                self.leader = None  # Reseta l√≠der para redescobrir
                self.send("HELLO", pid=self.pid)
                sleep(2)  # Aguarda resposta
                
            # Atualiza estado da rede para pr√≥xima itera√ß√£o
            self.was_connected = self.network.connected
            
            # PRIORIDADE 3: Durante elei√ß√£o, apenas monitora
            if self.in_election:
                self.log("Elei√ß√£o em andamento - aguardando resolu√ß√£o", "‚è∏Ô∏è", "red")
                sleep(1)
                continue

            # PRIORIDADE 4: Se n√£o tem l√≠der, tenta descobrir
            if self.leader is None:
                self.log("Sem l√≠der - enviando HELLO para descobrir", "üîç", "yellow")
                self.send("HELLO", pid=self.pid)
                sleep(5)  # Aguarda 5 segundos antes de tentar novamente
            elif self.leader is not None:
                # Log peri√≥dico de status quando tem l√≠der
                if now - last_status_log > 30:  # A cada 30 segundos
                    alive_count = len(self.get_alive_pids())
                    consensus_status = "ativo" if self.consensus_in_progress else "aguardando"
                    query_status = "ativo" if self.round_query_in_progress else "aguardando"
                    
                    # Se sou o l√≠der, mostro meu status detalhado
                    if self.leader == self.pid:
                        if self.consensus_in_progress:
                            self.log(f"üëë L√çDER EXECUTANDO CONSENSO - Round: {self.round}, Processos: {alive_count}", "üëë", "green")
                        elif self.round_query_in_progress:
                            self.log(f"üëë L√çDER FAZENDO QUERY - Round: {self.round}, Processos: {alive_count}", "üëë", "blue")
                        else:
                            self.log(f"üëë L√çDER AGUARDANDO - Round: {self.round}, Processos: {alive_count} (pr√≥ximo consenso em breve)", "üëë", "yellow")
                    else:
                        self.log(f"üíñ Sistema ativo - L√≠der: {self.leader}, Round: {self.round}, Processos: {alive_count}", "üíñ", "green")
                    
                    last_status_log = now
                    
                # Se sou o l√≠der e n√£o h√° consenso nem query em andamento, algo est√° errado
                # elif self.leader == self.pid and not self.consensus_in_progress and not self.round_query_in_progress:
                #     if now - last_problem_log > 20:  # A cada 20 segundos
                #         self.log("üö® PROBLEMA: L√≠der sem consenso nem query em andamento - fazendo query de round para recuperar", "üö®", "red")
                #         last_problem_log = now
                #         self.query_current_round()

                else:
                    # Pequena pausa para n√£o sobrecarregar CPU
                    pass
                
                sleep(1)  # Se tem l√≠der, verifica menos frequentemente
            else:
                self.log("‚ö†Ô∏è Estado indefinido - tentando elei√ß√£o", "‚ö†Ô∏è", "yellow")
                bully(self)
                sleep(1)
                
        # Este log s√≥ aparece se o loop while sair (n√£o deveria acontecer)
        self.log("üö® CR√çTICO: Loop principal terminou inesperadamente!", "üö®", "red")
        self.log(f"üìä Estado final - L√≠der: {self.leader}, Round: {self.round}, Processos vivos: {len(self.get_alive_pids())}", "üìä", "cyan")

    def listen(self):
        """
        Loop de escuta de mensagens multicast.
        
        Recebe mensagens do socket multicast e as processa
        atrav√©s do m√©todo handle(). Executa indefinidamente
        em thread separada.
        """
        self.log("üéß Iniciando escuta de mensagens multicast", "üéß", "cyan")
        last_activity_log = 0  # Para logs de atividade peri√≥dicos
        message_count = 0
        
        while True:
            result = self.network.receive(65535)
            if result is not None:
                data, _ = result
                message_count += 1
                self.handle(data)
            else:
                # Pequena pausa quando n√£o h√° dados ou erro de rede
                sleep(0.1)
                
                # Log peri√≥dico de atividade da thread de escuta
                now = monotonic()
                if now - last_activity_log > 60:  # A cada 60 segundos
                    self.log(f"üéß Thread de escuta ativa - {message_count} mensagens processadas", "üéß", "cyan")
                    last_activity_log = now
                    message_count = 0  # Reset do contador
                    
        # Este log s√≥ aparece se o loop while sair (n√£o deveria acontecer)
        self.log("üö® CR√çTICO: Loop de escuta terminou inesperadamente!", "üö®", "red")
        self.log(f"üìä Total de mensagens processadas: {message_count}", "üìä", "cyan")

def main():
    """
    Fun√ß√£o principal que inicializa e executa um n√≥ do sistema.
    
    Processa argumentos da linha de comando e cria uma inst√¢ncia
    do Node com os par√¢metros especificados.
    
    Args (linha de comando):
        --id: ID √∫nico do processo (obrigat√≥rio)
    """
    ap = argparse.ArgumentParser()
    ap.add_argument("--id",     type=int, required=True)
    args = ap.parse_args()
    
    # Log inicial do processo
    print(f"[INICIO] üöÄ Iniciando sistema com PID {args.id}")
    
    try:
        node = Node(pid=args.id)
        node.run()
    except KeyboardInterrupt:
        print(f"[SA√çDA] üõë Processo {args.id} interrompido pelo usu√°rio")
    except Exception as e:
        print(f"[ERRO] üí• Processo {args.id} falhou: {e}")
        import traceback
        traceback.print_exc()
    else:
        print(f"[NORMAL] ‚úÖ Processo {args.id} terminou normalmente (n√£o deveria acontecer)")
    finally:
        print(f"[FIM] üëã Processo {args.id} terminado")

if __name__ == "__main__":
    main()

