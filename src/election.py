"""
Implementa√ß√£o do algoritmo de elei√ß√£o Bully para sistemas distribu√≠dos.

O algoritmo Bully √© usado para eleger um coordenador (l√≠der) em um sistema
distribu√≠do onde processos t√™m IDs √∫nicos e apenas um pode ser l√≠der.
"""

from threading import Event, Thread
from time import monotonic, sleep
from .message import pack, unpack
from .config import BULLY_TIMEOUT

def bully(node):
    """
    Implementa o algoritmo de elei√ß√£o Bully para eleger um l√≠der.
    
    O algoritmo funciona da seguinte forma:
    1. Verifica se j√° existe um l√≠der v√°lido maior que o processo atual
    2. Envia mensagem ELECTION para todos os processos via multicast
    3. Aguarda respostas OK de processos com PID maior
    4. Se recebe OK, para a elei√ß√£o (processo maior assumir√° lideran√ßa)
    5. Se n√£o recebe OK no timeout, assume lideran√ßa
    
    Args:
        node: Inst√¢ncia do n√≥ que est√° iniciando a elei√ß√£o
        
    Note:
        Este algoritmo assume que:
        - Processos com PID maior t√™m prioridade para lideran√ßa
        - Comunica√ß√£o √© realizada via multicast
        - Apenas um l√≠der pode existir por vez
        
    Comportamento:
        - Se j√° existe l√≠der v√°lido maior: cancela elei√ß√£o
        - Se recebe OK durante elei√ß√£o: para e aguarda novo l√≠der
        - Se timeout sem OK: assume lideran√ßa e envia LEADER
    """
    # Se j√° h√° um l√≠der v√°lido e sou menor, n√£o preciso me eleger
    if node.leader is not None and node.pid < node.leader:
        node.log(f"J√° existe l√≠der {node.leader} maior que eu - cancelando elei√ß√£o", "üõë", "blue")
        return
    
    node.log("Iniciando elei√ß√£o bully - enviando para TODOS os processos", "üî•", "red")
    
    # Reseta o flag antes de iniciar elei√ß√£o
    node.received_ok = False
    
    # Manda por multicast para TODOS 
    node.send("ELECTION", source=node.pid)
    node.log(f"Enviado ELECTION para todos os processos", "üì°", "yellow")

    # Aguarda por respostas OK
    start_time = monotonic()
    timeout = BULLY_TIMEOUT
    
    while monotonic() - start_time < timeout:
        if node.received_ok:
            node.log("Recebido OK de processo maior - parando elei√ß√£o", "‚úÖ", "green")
            node.received_ok = False  # Reseta para pr√≥xima elei√ß√£o
            node.log("Algoritmo bully finalizado (OK recebido)", "üèÅ", "green")
            return
        sleep(0.1)

    # Se chegou aqui, ningu√©m maior respondeu
    node.log("Timeout da elei√ß√£o - nenhum processo maior respondeu", "‚è∞", "yellow")
    
    # Verifica novamente se n√£o h√° l√≠der maior antes de assumir
    if node.leader is None or node.pid > node.leader:
        node.log("Assumindo lideran√ßa", "üëë", "green")
        node.become_leader()
    else:
        node.log(f"L√≠der {node.leader} j√° existe - n√£o assumindo lideran√ßa", "üôÖ", "blue")
    
    node.log("Algoritmo bully finalizado (timeout)", "üèÅ", "yellow")

