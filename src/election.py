"""
Implementa√ß√£o do algoritmo de elei√ß√£o Bully para sistemas distribu√≠dos.

O algoritmo Bully √© usado para eleger um coordenador (l√≠der) em um sistema
distribu√≠do onde processos t√™m IDs √∫nicos e apenas um pode ser l√≠der.
"""

from threading import Event, Thread
from time import monotonic, sleep
from .message import pack, unpack
from .config import BULLY_TIMEOUT

def bully(node):
    """
    Implementa o algoritmo de elei√ß√£o Bully para eleger um l√≠der.
    
    O algoritmo funciona da seguinte forma:
    1. Envia mensagem ELECTION para todos os processos via multicast
    2. Aguarda respostas OK de processos com PID maior
    3. Se recebe OK, para a elei√ß√£o (processo maior assumir√° lideran√ßa)
    4. Se n√£o recebe OK no timeout, assume lideran√ßa
    
    Args:
        node: Inst√¢ncia do n√≥ que est√° iniciando a elei√ß√£o
    """
    node.log("Iniciando elei√ß√£o bully - enviando para TODOS os processos", "üî•", "red")
    
    # Reseta o flag antes de iniciar elei√ß√£o
    node.received_ok = False
    
    # Manda por multicast para TODOS 
    node.send("ELECTION", source=node.pid)
    node.log(f"Enviado ELECTION para todos os processos", "üì°", "yellow")

    # Aguarda por respostas OK
    start_time = monotonic()
    timeout = BULLY_TIMEOUT
    
    while monotonic() - start_time < timeout:
        # Verifica se recebeu OK
        if node.received_ok:
            node.log("Recebido OK de processo maior - parando elei√ß√£o", "‚úÖ", "green")
            node.received_ok = False
            node.log("Algoritmo bully finalizado (OK recebido)", "üèÅ", "green")
            return
        
        # Verifica se j√° h√° l√≠der v√°lido (pode ter sido detectado durante elei√ß√£o)
        if node.leader is not None and node.leader > node.pid:
            node.log(f"L√≠der {node.leader} detectado durante elei√ß√£o - cancelando", "üõë", "blue")
            node.log("Algoritmo bully finalizado (l√≠der detectado)", "üèÅ", "blue")
            return
            
        sleep(0.1)

    # Se chegou aqui, ningu√©m maior respondeu
    node.log("Timeout da elei√ß√£o - nenhum processo maior respondeu", "‚è∞", "yellow")
    
    # Verifica se h√° processos maiores ANTES de imprimir que vai assumir
    alive_pids = list(node.alive.keys())
    bigger_processes = [pid for pid in alive_pids if pid > node.pid]
    
    if bigger_processes:
        node.log(f"Processos maiores detectados: {bigger_processes} - n√£o assumindo lideran√ßa", "‚ö†Ô∏è", "yellow")
        node.log("Algoritmo bully finalizado (processos maiores encontrados)", "üèÅ", "yellow")
        return
    
    # S√≥ agora assume lideran√ßa
    node.log("Assumindo lideran√ßa", "üëë", "green")
    node.become_leader()
    
    node.log("Algoritmo bully finalizado (timeout)", "üèÅ", "yellow")

